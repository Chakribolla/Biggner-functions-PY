# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eLDmd0o2AiNVAJHUfpHSmLvTenXT3TF3
"""

n=5
for r in range(1,n+1):
  for c in range (n-r):
    print(' ',end='')
  for c in range (r):
    print('*',end='')  
  for c in range (n-r):
    print(' ',end='')
  print('')



def main():
   a=int(input())
   m=1
   while m<=10 :
       print(m*a)
       m=m+1
       return 0

def value(x) :
  if x<0 :
    x=x*-1
    return x
  else :
    return x

n=5
for r in range(1,n+1):
  for c in range (n-r):
    print(' ',end='')
  for i in range (2*r-1):
    print('*',end='')  
  for c in range (n-r): 
    print(' ',end='')
  print('')

value(-5)

n=int(input())
for r in range(1,n+1):
  for c in range (n-(r-1)):
    print('*',end='')
  for i in range ((r-1)*2):
    print(' ',end='')  
  for c in range (n-(r-1)):
    print('*',end='')
  print('')

n=int(input())
for r in range(1,n+1):
  for c in range (n-(n-r)):
    print('*',end='')
  for c in range ((n-r)*2):
    print(' ',end='')  
  for c in range (n-(n-r)):
    print('*',end='')
  print('')

n=int(input())
for r in range(1,n+1):
  for c in range (n-(n-r)):
    print(,end='')
  print('')

"""# New Section"""

n=int(input())
for r in range(1,n+1):
  for c in range (1):
    print('*',end='')
  for i in range (n-2):
    print(' ',end='')  
  for c in range (1):
    print('*',end='')
  print('')

n=int(input())
for r in range(1,n+1):
    for c in range (r):
        print('*',end='')
    print('')
for r in range(1,n):
    for c in range (n-r):
        print('*',end='')
    print('')

n=int(input())
for r in range(1,n+1):
  for c in range (1):
    print('*',end='')
  for c in range ((n-r+1)):
    print(' ',end='')  
  for c in range (1):
    print('*',end='')
  print('')

n=int(input())
for r in range(1,n+1):
  for c in range (r
    print('*',end='')  
  print('')

n=input().split()
x=[]
for i in n :
    x.append(i)
print(x)

print(x)

def duplicate(n,x):
    for i in range(1,n+1):
        y=[]*x
        m=input().split()
        y.append(m)
        o=0
        for j in y :
            if o==int(j):
                return('True')
            o=j
        else :
            return('False')

def occurrences(A, B):
        t=0
        for i in range(len(A)):
          
          if A[i]==B :
              t=t+1
        return t

A=[1,2,2,3]
B=2

occurrences(A,B)

A=input().split()
x=[]
for i in A :
    x.append(i)
    m=x[0]
    for j in x :
      if m<j :
        m=j
print(m)



print(m)

def solve(A):
  secondmax = -1
        m=0
        o=0
        for j in A :
            if m<int(j) :
                m=int(j)
        for j in A :
            if int(j)>o :
              if int(j)<m:
                o=int(j)
        secondmax = o 
            
    return o

A=[5,2,3,3,2]

solve(A)

for j in A :
  print(int(j))

# for a given input number of rows and coloumns are equal, print the matrix in coloums wave form
n=int(input())
x=[]
for i in range(n):
    y=input().split()
    l=list(map(int,y))
    x.append(l)
for j in range(n):
        if j%2==0 :
            for k in range(n):
                print(x[k][j], end=' ')
        else :
            for k in range((n-1), -1, -1) :
                print(x[k][j], end=' ')

def change_char(s):
    ch = s[0]

    res = ''

    res += ch

    for i in range(1, len(s)):

        if s[i] == ch:

            res += '$'

        else:

            res += s[i]

    return res

t='marry'
change_char(t)

a = "Random String"
 b=a

print(b.upper())
print(a)

a='how'
b= 'u'
n=[]
m=[]
for i in a:
  n.append(i)
for j in b :
  m.append(j)
n.append(" ")
print(n)

type(48)

i=6
if (ord(str(i))) >=48 and (ord(str(i))) <=57 :
  print(i)

str1 = "quick brown fox word!"
print(str1[12:15], str1[:5], str1[-5:-1], str1[8:110], str1[-4:])

def count(n):
  ans=0
  while n>0 :
    if n%10==1:
      ans += 1
    n=n//10
  return ans

count(1122)

l = ['red','blue&orange']
l1 = ' '.join(l)
l2 = l1.split('&')
l3 = ' '.join(l2)
l4 = l3.split()
print(l4)



10/100

120.0//10

def new_menu(m):
    #This is the Menu list we want to update
    Menu = [['Sweet_Corn_Soup', 300.0], ['Cream_of_Tomato_Soup', 100.0], ['Bacon_and_Cheese', 150.0], ['Honey_Mustard', 230.0], ['Hot_Coffee', 50.0], ['Cold_Coffee', 50.0], ['Egg_Sandwiches', 130.0], ['Tacos', 400.0]]
    
    for i in range(len(Menu)) :
        for j in range(len(m)) :
            if Menu[i][0]==m[j]:
                Menu[i][1]=Menu[i][1]+((Menu[i][1])//10)
    
    
    return Menu

type(3)

res_arr = []
    for i in range(len(arr)):
        if isinstance(arr[i], list) :
            for j in range(len(arr[i])):
                res_arr.append(arr[i][j])
        else :
            res_arr.append(arr[i])

l = [1,2,[3,4],5,6]
l1= iter(l)
print(next(l1))
print(next(l1))
print(next(l1))
print(next(l1))
print(next(l1))

a = 'abcd'
x=a[:2:]
y=a[-2::]
b=y+x
print(b)

sq = lambda x : x**2

sq(2)

[ i  for i in range(11) if i%2==0  ]

def unknown(string):
  a = set(string)
  a="".join(a)
  print(a)

string='aiimn'
unknown(string)

arr= [(1,2),(2,3),(2,3),(1,2),(5,6)]
[ (a,b) for i, [a,b] in enumerate(arr) if not any (c==b for _, c in arr[ : i])]

def club_entry(names):
  age_list = for i in names:[2022 - int(i[1:5])] #blank1
  entry = []
  for i in age_list:         
    if  i > 18:                 #blank2                
      entry.append('You can Enter')
    else:
      entry.append('No Entry for you')
  return entry

str1 = "PYcharm3"
print(str1[1:4], str1[:5], str1[-6:], str1[0:-1], str1[:-1])

def most_frequent(List):
  total=0
  result= List[0]
  for i in List:
    curr_frequency = List.count(i)
    if (curr_frequency > total):
      total =curr_frequency
      result = i

    
  return(result)

List= [1,2,2,3,4]
most_frequent(List)

lis = [(0, 2), (1, 3), (2, 4)]
result = sum (n for _, n in lis)
print(result)

{x : x**2 for x in range(1, 6)}

n = 5
[ [ max(i+1, j+1, n-i, n-j) for j in range(n)] for i in range(n) ]

n = 7
for i in range(n):
  for j in range(n):
    x=max(i+1,j+1,n-i,n-j)
    print(x,end=', ')
  print()

class Dog:
  name = "bruno"
Dog.name

Dog.name= 'lkin'

class Dog:
  def __init__(self, name):
    self.name = name

d=Dog('hugg')
Dog.name ='iuhg'
print(d)

class solution:
  def initial(self,sets):
    return self.final(sets)
 
  def final(self, sets):
    return list(map(lambda x: ((x**3)%2==0,x**3),sets))

print(solution().initial([4,5,6]))

Dog.paw = 'pioi'

x =[]
y ='ijuh'
z=list(y)



print(y[-1]+y[:len(y):])

class Props:
    def __init__(self, x, y):
        self.x = x
        self.y = y


class Ball(Props):
    def __init__(self, x, y):
        super().__init__(x, y)
        self.shape = "o"
        self.number = 1
        self.vely = 0
        self.velx = 0

    def get_x(self):
        return self.x
 
    def get_y(self):
       return self.y

    def get_velx(self):
       return self.velx
 
    def get_vely(self):
       return self.vely
    
    def inc_velx(self):
       self.velx = self.velx+2
    
    def inc_vely(self):
       self.vely = self.vely+1

obj_ball = Ball(27,3)

bx = obj_ball.get_x()
by = obj_ball.get_y()
b_velx = obj_ball.get_velx()
b_vely = obj_ball.get_vely()

print(bx, by, b_velx, b_vely)

class Employee:

    def __init__(self, name, val):

        self.__name=name

        self._salary=val

e1=Employee("Rahul",200)

print(e1._salary)

class Parent:
  def __init__(self):
    pass
  def print(self):
    print("60")
class Child(Parent):
  def __init__(self):
    super().__init__()
  def type(self):
    self.print()



C=Child()
C.type()

class A:
   def one(self):
       return self.two()
   def two(self):
       return 'A'
class B(A):
   def two(self):
       return 'B'
obj= B()
print(obj.one())

class A:
 def __init__(self, name, sound="Grrrr"):
   self.name = name
   self.sound = sound

 def make_noise(self):
   print("{} says, {}".format(self.name,self.sound))

class B(A):
 def __init__(self, name="Rachel"):
   super().__init__(name, "Meow!")

 def make_noise(self,sound="Grrrr!"):
   print("{} says, {}".format(self.name, sound))

pet_cat = B()
pet_cat.make_noise()

class A:
   def one(self):
       return self.two()
   def two(self):
       return 'A'
class B(A):
   def two(self):
       return 'B'
obj= B()
print(obj.one())

class A:
   def one(self):
       return self.two()
   def two(self):
       return 'A'
class B(A):
   def two(self):
       return 'B'
obj= B()
print(obj.one())

def man_of_match(names, runs, wickets, bowls):
    
     
    data = dict(zip(names, map(list, zip(*(map(int, lst) for lst in (runs, wickets, bowls))))))
    
    
    for i in range(len(runs)):
        if (runs[i]/bowls[i]) > 4 and wickets[i]>2 :
            manofMatch = names[i]

        elif 4 < (runs[i]/bowls[i]) > 2 and wickets[i]>4 :
            manofMatch = names[i]     
        
       
    
    
    
    return data,manofMatch

class AI:
    def check(self):
        return "AI's check"
    def display(self):
        print(self.check(),end=" ")

class ML(AI):
    def check(self):
        return "ML's check"

AI().display()
ML().display()

class A:

  def __init__(self, x, y):

    self.x = x
    self.y = y

  def __str__(self):

    return 1
  def __eq__(self, other):

    return self.x * self.y == other.x * other.y

obj1 = A(9, 8)
obj2 = A(8, 9)
print(obj1 == obj2)

class Smaller:
    def __init__(self,a):
        self.string=a
    
    def display(self):
        print("The type of Name is smaller")
    
    def evaluate(self):
        ans=0
        self.string=list(a)
        for i in a :
            if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':
                ans+=1 
        
       
        print(ans)
        
class Larger:
    def __init__(self,a):
        self.string=a
    
    def display(self):
        print("The type of Name is larger")
    
    def evaluate(self):
        ans=0
        self.string=list(a)
        for i in a :
            if i != 'a' and i != 'e' and i != 'i' and i != 'o' and i != 'u':
                ans+=1 
        
        
        print(ans)

def main(a):
    '''
    input a is string
    '''
    if len(a)<6:
        obj=Smaller(a)
        obj.display()
        obj.evaluate()
    else:
        obj=Larger(a)
        obj.display()
        obj.evaluate()

strn = 'i dont know'
k = strn.split()

print(len(k[1]))

odd=lambda x: bool(x%2)
result=[n for n in range(10)]

for i in result:
    if odd(i):
        continue       
    else:
        print(i, end=" ")

arr = ['php', 'w3r', 'python', 'aaa', 'java']
list( filter( lambda x: (x ==''.join( reversed(x))), arr))

import functools
lists = [1,2,3,4]
print(functools.reduce(lambda x,y : x if x > y else y ,lists))

sentence = "abc cde def"
result = list(map(lambda x: list(x), sentence.split(" ")))
print(result)

list1 = [[1,2,3],[4,5,6],[7,8,9]]
list2 = [[9,8,7],[6,5,4],[3,2,1]]
ls11,ls12,ls13=list1
ls21,ls22,ls23=list2
print(list(zip(ls11,ls12,ls13,ls21,ls22,ls23)))

ids=["Sam@gmail.com", "Ram@gmail.com", "Sam@gmail.com", "samJohnson@iit.com", "SAM@harvard.com"]
name="sam"
result = list(filter(lambda x : name.lower() in x or name.upper() in x , ids))
print(result)

listA=['one', 'two' , 'three']
listB=['apple','cherry','watermelon']
list(map(lambda x, y: x+ ' ' +y, listA, listB))

l=[1,2,3]
m=['jj','kjj','oiuu']

student_data = list(map(lambda x,y : [x,y],m,l))
print (student_data)

m=[1,3,2,1,1]
l=['jj','kjj','oiuu','kjjh','jhgf']
k=dict(zip(m,l))
k.pop(min(k))
print(min(k))
print(k[min(k)])

def second_lowest(students, scores):
    '''
    input:
    students -> a list of students
    scores -> list of the scores, with each score being that of the ith student
    
    output:
    student_data -> 2d list of data, with each inner list having name of student as 1st and score of 2nd as second element respectively
    second_low_score -> the second lowest score
    second_names -> list of students with score same as second lowest score, in the same order as in the students list
    '''
    
    student_data, second_low_score, second_names = None, None, None
    
    student_data = list(map(lambda x,y : [x,y],students,scores))
    k=dict(zip(scores,students))
    k.pop(min(k))
    second_low_score = min(k)
    second_names = k[min(k)]


    
    print(student_data)
    print(second_low_score)
    print(second_names)

second_lowest(l, m)

def second_lowest(students, scores):

    '''

    input:

    students -> a list of students

    scores -> list of the scores, with each score being that of the ith student

    

    output:

    student_data -> 2d list of data, with each inner list having name of student as 1st and score of 2nd as second element respectively

    second_low_score -> the second lowest score

    second_names -> list of students with score same as second lowest score, in the same order as in the students list

    '''

    student_data, second_low_score, second_names = None, None, None

    

    # Your code starts here

    

    student_data = []

    second_low_score = 0

    for i in range(len(students)):

      student_data.append([students[i],scores[i]])

    order = sorted(student_data,key=lambda x: int(x[1]))

    for i in range(len(students)):

      if order[i][1] != order[0][1]:

        second_low_score=order[i][1]

        break

    second_names=[x[0] for x in order if x[1] == second_low_score]

    

    # Your code ends here

    return student_data, second_low_score, second_names

def verify(s):

  #consider the case where there isn't either @, then the split function will throw error.

  

  freq_attherate=0

  freq_dot=0

  for i in range(len(s)):

    if(s[i]=="@"):

      freq_attherate+=1

  if (freq_attherate!=1):

    return False

  user, domain = s.split("@")

  

  if(len(user)>20 or len(user)<=0):

    return False

  if(len(domain)<=0):

    return False

  return True

 

def check(emails):   

    verified_lex = None   

    verified_lex = list(filter(verify, emails))

    verified_lex.sort()

    return verified_lex

arr=[3,2,5,6,7,8]

for j in range(len(arr)-1,-1,-1):
  for k in range(0,j):
    if(arr[k]>arr[k+1]):
      temp=arr[k] 
      arr[k]=arr[k+1]
      arr[k+1]=temp

print(arr)

def insertionSort(arr,k):
    
    for i in range(k+1):
        element_to_insert = arr[i]

        j = i-1
        while j >= 0 and element_to_insert < arr[j]:
          arr[j+1] = arr[j]
          j -= 1
    
          arr[j+1] = element_to_insert

    return arr[k]

arr=[111 ,123 ,435 ,23 ,100, 101, 540 ,1000]
k= 5
insertionSort(arr,k)

"Amse" < 'AB'

arr = [2,7,8,5,1]
for i in range(0, len(arr) - 1):
    min = i
    for j in range(i + 1, len(arr)):
        if arr[j] < arr[min]:
            min = j
    temp = arr[min]
    arr[min] = arr[i]
    arr[i] = temp

arr

def bp(string, n):
  if n>0:
    print(string[n], end='')
    bp(string, n-1)
  elif n==0:
    print(string[0])

s='NEWS'
bp(s, len(s)-1)

s ="hierhithi"
m=s.split('hi')
n=''.join(m)
import math
math.ceil((len(s)-len(m))/2)

def fun(i,j):
      if(i==0):
         return j
      else:
         return fun(i-1,j+1)

def fun(i,j):
  if(i==0):
    return j
  else:
    return fun(j,i-5)

print(fun(15,8))

l=[10,0,-10]
l=list(set(l))

l.sort()

l

def sentinelSearch(ar,target,n):
  last = ar[n-1]
  ar[n-1] = target
  i = 0
  while ar[i]!=target:
    i+=1
  ar[n-1] = last
  if (i<n-1) or target==ar[n-1]:
    return i
  else:
    return -1

sentinelSearch([1,2,3,4,5],5,5)

def recur_search(key, values, lower, upper):
  if (upper < lower):
    return False

  mid = (lower + upper) // 2

  if (key == values[mid]):
    return True;
 
  elif (key < values[mid]):
    recur_search(key, values, lower, mid - 1)

  else: 
    recur_search(key, values, mid + 1, upper)

  return False

recur_search(3, [1, 2, 3, 4, 5], 0, 4)

round(56

1^1

def reverseBits(n) :
     
    rev = 0
     
    # traversing bits of 'n' from the right
    while (n > 0) :
         
        # bitwise left shift 'rev' by 1
        rev = rev << 1
         
        # if current bit is '1'
        if (n & 1 == 1) :
            rev = rev ^ 1
         
        # bitwise right shift 'n' by 1
        n = n >> 1
    return rev

x = 637534208
Result = int(str(x),2) 
print(Result)

bin(637534208)

0b0010011

0b11111111111111111111111110011100

class DSML():

    def __init__(self, value):
        self.value = value

    def __and__(self, obj):
      mask = ~(1 << obj.value)
      self.value = self.value & mask
      return self.value & obj.value

    def __or__(self, obj):
      mask = 1 << obj.value
      self.value = self.value ^ mask
      return self.value | obj.value

    def __invert__(self):
      mask = 1 << 5
      return ~(mask | self.value)

a = DSML(8)
b = DSML(5)
c = DSML(0)
print(a & b,a | b, ~c)

def showbits(n):
  for i in range(15,-1,-1):
    mask=1<<i
    k=n & mask
    if k==0:
      print(0,end="")
    else:
      print(1,end="")
showbits(10)

f = None 
for i in range (5): 
    with open("data.txt", "w") as f: 
        if i > 2: 
            break 
print(f.closed)

with open("essay.txt","r") as f:

    count = 0

    data = f.readline()

    words = data.split()

    for word in words:

        count += 1

    print(count)

source = open("Jawa-Perak.jpg",'rb+')
destination = open("Jawa-Perak2.jpg",'wb+')

while True :
  lawda = source.read(256)

  if not lawda :
    break

  destination.write(lawda)
source.close()

2 & 1

1<<31

bin(100)

0|2147483648

def reverseBits(n):
    size = 32
    position = size - 1    
    result = 0
    while position >= 0 and n:
        if n & 1:
            result = result | (1 << position) 
            print(result)

        n >>= 1     
        position = position - 1
        
        
    return result

reverseBits(100)

import numpy as np

v = np.linspace(0,10,10)
print(v)

c = np.array([[1,2,9],[3,5,8],[8,6,4]])
print(c)
d=c.T
print(d)
d[0],d[2]=d[0,::-1],d[2,::-1]
print(d)











